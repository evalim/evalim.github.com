<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | 石头的博客]]></title>
  <link href="http://evalim.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://evalim.github.io/"/>
  <updated>2013-08-13T00:10:40+08:00</updated>
  <id>http://evalim.github.io/</id>
  <author>
    <name><![CDATA[GZShi]]></name>
    <email><![CDATA[shgzone@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用双眼识别条形码]]></title>
    <link href="http://evalim.github.io/blog/2013/04/30/bar-code/"/>
    <updated>2013-04-30T15:22:00+08:00</updated>
    <id>http://evalim.github.io/blog/2013/04/30/bar-code</id>
    <content type="html"><![CDATA[<h2 id="section">条形码</h2>
<p>条形码应用的广泛程度不用我去赘述，随便拿起身边的饮料瓶或一本书，很容易便会发现印在其包装或封底的条形码。条形码被誉为印在纸上的机器语言，因为其记录的信息非常方便用机器读取。<br />
条形码的格式丰富多样，每一种格式都有特定的编码规则，其中EAN-13格式最为常见。EAN是“European Article Number”的简写，13代表代码长度。最初EAN只是欧洲范围内使用，但是现在已经成了全球范围内产品交易的上平代码。你看到的书、喝的果汁、吃的饼干这些商品包装上的条形码都是采用这种格式。  </p>

<h3 id="section-1">基本结构</h3>
<p>EAN-13的每一位数字都有特定含义，但是我不打算去细究这些东西，如果有兴趣请移步维基百科上<a href="http://zh.wikipedia.org/wiki/EAN">关于EAN的介绍</a>。现在只需要把EAN-13分为两个部分：前12位和最后1位。前12位称为数据位，最后一位称为校验位。 
<!-- more --> </p>

<h3 id="section-2">更细基本单位</h3>
<p>条形码的可读范围从最左边的第一条黑条开始，一直到最右边的黑条。仔细看你会发现最左和最右的黑条是最细的，再仔细看你又会发现中间的那些宽一点的黑条只会是最左边黑条的2倍、3倍或4倍宽。如果把最左黑条旁边的白色空隙看做白条，你会发现这一条白条和最细的黑条一样宽，而且是所有白条中最细的，中间的宽一点的白条都是这条白条的2倍、3倍或4倍。如果你发现某个条形码最宽的黑条/白条比最窄的黑条/白条宽4倍以上，那么这个条形码一定是错误的或者被篡改了。<br />
且将最窄的黑条记为<code>1</code>，最窄的白条记为<code>0</code>，那么如下图所示的条形码就可以记为<code>1010011101</code><br />
<img src="/images/blog/2013043001.png" alt="barcode" /><br />
如果你的眼睛足够犀利，那么任何黑白交错的条形码都能被你的双眼转换为类似上面的<code>01</code>串，这正是识别条形码的基础，有了这些<code>01</code>串，就可已进入下一步识别步骤了，不过在进入下一步之前，请再仔细观察一下条形码。<br />
条形码最左边的3条（101）、最右边的三条、和中间的5条（01010）都会比其它的条形要长一点，这三个区域叫做这个二维码的护线，二维码的数据位或校验位的信息并不会记录在这3个区域当中，他们存在的作用仅仅是告诉识别机器它们是这段条形码的开始、中间和结束部分，并且他们的黑条和白条是最窄的，是其它条形宽度的参考。  </p>

<h3 id="section-3">数据组成</h3>
<p>擦亮大家的双眼，一起来把下面的条形码翻译成<code>01</code>串，其中护线和数据位可以稍微留一点空白便于区分<br />
<img src="/images/blog/2013043002.png" alt="barcode" /><br />
我的得到的结果是：<br />
<code>101</code><br />
<code>011101100010010010001001100100110110011001</code><br />
<code>01010</code><br />
<code>110011010010001100110110011010010001011100</code><br />
<code>101</code><br />
把上面的护线部分忽略掉，把剩下的串按每7位组成一个部分，我们将得到下面这样的更细的片段：<br />
左边 <code>0111011</code> <code>0001001</code> <code>0010001</code> <code>0011001</code> <code>0011011</code> <code>0011001</code><br />
右边 <code>1100110</code> <code>1001000</code> <code>1100110</code> <code>1100110</code> <code>1001000</code> <code>1011100</code><br />
上面的每一个部分都只表示一个数字。按照这个规则上面刚好只有12个数，和之前所说的13个数字有偏差。那另外一个数字丢哪里了呢？请继续看下去。<br />
看看上面的数字，你会发现一个规律，左边的每一个数字都是以<code>0</code>开头、以<code>1</code>结尾，右边的数字则刚好相反。这正是条形码的查错方式之一，如果发现读取的条形码不符合上面规则，那么这个条形码是有错误的。<br />
接下来将上面的各个待解读的数字分为两类：有奇数个<code>1</code>的奇类、有偶数<code>1</code>的偶类。例如，<code>0111011</code>有奇数个<code>1</code>，<code>0001001</code>有偶数个<code>1</code>。根据这个分类你会发现，左边的部分有一些是奇类有一些是偶类，右边的全是偶类。如果你在读取过程中发现右边的部分中存在奇类，那么这个条形码一定是错误的。<br />
下面是这些<code>01</code>串和数字的对应规则：  </p>

<pre><code>奇类  
0001101 → 0　　0110001 → 5  
0011001 → 1　　0101111 → 6  
0010011 → 2　　0111011 → 7  
0111101 → 3　　0110111 → 8  
0100011 → 4　　0001011 → 9  

偶类  
1110010 → 0　　1001110 → 5  
1100110 → 1　　1010000 → 6  
1101100 → 2　　1000100 → 7  
1000010 → 3　　1001000 → 8  
1011100 → 4　　1110100 → 9  
</code></pre>

<p>现在可以开始读数字了，左边第一个是<code>0111011</code>，属于奇类，根据对应规则得到的数字是7。左边第二个是<code>0001001</code>，属于偶类，可是找遍所有的偶类规则都不能匹配。还是条形码有问题？还是我们的01串读错了？其实左边的偶类在读取的时候是要逆向读的，也就是说，刚刚的<code>0001001</code>先要转换成<code>1001000</code>然后再去偶类规则里去找对应的数字。现在我们很容易就找到第二个对应数字是8。依次类推，我们把剩下的数字都能读出来，最后的结果应该是<code>787121</code>和<code>181184</code>。<br />
之前悬着的问题是时候面对了——说好的13个数字呢？！其实这个被遗忘的数字就藏在<code>01</code>串当中，如果把<code>01</code>串左边的部分的奇类看为<code>1</code>，偶类看为<code>0</code>，那么左边会得到一个新的6位串<code>100101</code>，这个串的读取规则如下：  </p>

<pre><code>111111 → 0　　100110 → 5  
110100 → 1　　100011 → 6  
110010 → 2　　101010 → 7  
110001 → 3　　101001 → 8  
101100 → 4　　100101 → 9  
</code></pre>

<p>根据规则，得到的数字是9。把这个数字和之前读取的数字连起来就是<code>978712118184</code>，掏出手机扫描一下即可验证其是正确的。  </p>

<h3 id="section-4">校验规则</h3>
<p>条形码有一个非常重要的特点就是防止篡改，这在实际使用中是非常重要的。根据EAN-13规则，<code>978712118184</code>的最后一个数字<code>4</code>是校验位，用于检验前面的数字是否被修改过，具体的检验步骤如下：  </p>

<pre><code>1. 取数据位中的奇数位求和得到S1  
2. 取数据位中的偶数位求和得到S2  
3. S3 = S1 + S2 * 3  
4. M = S3 % 10（取S3的个位数）  
5. C = 10 - M  
</code></pre>

<p>C就是最后的校验结果，这个结果和第13位做比较，如果不同就代表数据有问题。<br />
结合上面的奇类偶类读取规则不难发现，简单的涂改一定会导致条形码出错的。不过这也是条形码的一个短处所在，如果不经意之间损坏了条形码的结构，哪怕只有一条，都会导致其中的信息完全失效，也就是说条形码没有容错功能。那么有没有既有防篡改又能纠错的条形码呢？答案是肯定的，这个“条形码”叫做“二维码”！  </p>

<h2 id="section-5">生成条形码</h2>
<p>知道了EAN-13的规则，就可以动手写一个生成条形码的应用了。输入一个12位（不含校验的情况）或13位数字，就能生成相应的条形码：  </p>

<div style="background:rgba(133, 133, 133, 0.1); margin:0 auto; padding:1em">
	<span>输入12位或13位数字：</span>
	<input type="text" value="978712118184" id="in" />
	<button onclick="create()">Create</button><br />
	<canvas id="c" width="400px" height="300px" />
	<script>
// 左边的规则
function leftCode(number, o) {
    if(o == '1')
		return [
			'0001101', '0011001', '0010011', '0111101', '0100011',
			'0110001', '0101111', '0111011', '0110111', '0001011'][parseInt(number)%10];
	else {
		return [
			'0100111', '0110011', '0011011', '0100001', '0011101',
			'0111001', '0000101', '0010001', '0001001', '0010111'][parseInt(number)%10];
	}
}

// 右边的规则
function rightCode(number) {
	return [
		'1110010', '1100110', '1101100', '1000010', '1011100',
		'1001110', '1010000', '1000100', '1001000', '1110100'][parseInt(number)%10];
}

// 隐含数字的规则
function ISBNLeftRule(number) {
	return [
		'111111', '110100', '110010', '110001', '101100',
		'100110', '100011', '101010', '101001', '100101'][parseInt(number)%10];
}

function createEAN13(series) {
	var result = '101';
	var rule = ISBNLeftRule(series[0]);
	for(var i = 1; i < 7; ++i) {
		result += leftCode(series[i], rule[i-1]);
	}
	result += '01010';
	for(var i = 7; i < 13; ++i) {
		result += rightCode(series[i]);
	}
	result += '101';
	return result;
}

// 校验规则
function checkEAN13(series, mode) {
	var sum = 0;
	for(var i = 0; i < 6; ++i) {
		sum += parseInt(series[i*2]);
		sum += parseInt(series[i*2 + 1]) * 3;
	}
	sum = 10 - (sum % 10);
	if(mode == true)
		return sum + '';
	if(parseInt(series[12]) == sum)
		return true;
	return false;
}

function draw(ctx, series) {
	ctx.clearRect(0, 0, 1000, 1000);
	if(series.length == 12) {
		series = series + checkEAN13(series, true);
	} else if(checkEAN13(series) == false) {
		ctx.fillStyle = 'black';
		ctx.fillText('check failed!', 10, 30);
		return ;
	}
	var WIDTH = 4;		// 条码宽度
	var HEIGHT = 200;	// 条码高度
	var bc = createEAN13(series);
	ctx.fillStyle = 'black';
	for(i = 0; i < 3; ++i) {
		if(bc[i] == '1') {
			ctx.fillRect(i*WIDTH, 20, WIDTH, HEIGHT+25);
		}
	}
	for(; i < 45; ++i) {
		if(bc[i] == '1') {
			ctx.fillRect(i*WIDTH, 20, WIDTH, HEIGHT);
		}
	}
	for(; i < 50; ++i) {
		if(bc[i] == '1') {
			ctx.fillRect(i*WIDTH, 20, WIDTH, HEIGHT+25);
		}
	}
	for(; i < 92; ++i) {
		if(bc[i] == '1') {
			ctx.fillRect(i*WIDTH, 20, WIDTH, HEIGHT);
		}
	}
	for(; i < 95; ++i) {
		if(bc[i] == '1') {
			ctx.fillRect(i*WIDTH, 20, WIDTH, HEIGHT+25);
		}
	}
}

function create() {
	var ctx = document.getElementById('c').getContext('2d');
	var text = document.getElementById('in').value;
	draw(ctx, text);
}
create();
</script>
</div>

<p>下面是JavaScript代码链接:<br />
<a href="https://gist.github.com/GZShi/5487022">https://gist.github.com/GZShi/5487022</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[贪吃蛇也需要思考人生]]></title>
    <link href="http://evalim.github.io/blog/2013/04/27/snake-ai/"/>
    <updated>2013-04-27T23:09:00+08:00</updated>
    <id>http://evalim.github.io/blog/2013/04/27/snake-ai</id>
    <content type="html"><![CDATA[<h2 id="section">我的贪吃蛇历史</h2>
<p>在九宫格手机风靡的时代，贪吃蛇可以说是一部手机的标配，至少诺基亚的手机肯定会有。什么时候第一次接触贪吃蛇我已经不记得了，但是关于贪吃蛇我倒是有几段比较清晰的记忆。    </p>

<h3 id="section-1">黑白屏经典贪吃蛇</h3>
<p>高一的时候，坐在我后面的<a href="http://weibo.com/greenarlene">同学</a>有一部挂着草莓挂坠的小灵通，刚好里面有贪吃蛇游戏，是最经典最简单的那种，有墙壁，没有障碍，蛇的身体是一个个黑色小方块，速度不会改变，吃一粒食物，长一节身体。<br />
这种小游戏的特点就是上手容易，高分很难，也许这正是贪吃蛇能经久不衰的原因吧。每次都希望以最短的时间去冲击排行榜上的最高分，但往往都会因为一个非常小的失误含恨撞墙或咬蛇自尽。<br />
<!-- more --><br />
这种经典模式的要诀是开始的时候尽量走最短的路径去吃到食物，到了比较长的时候就只能迂回前进，把身体尽可能的缩成一团，不要留缝隙。如果按照这种策略去玩还不能吃尽最后一个食物，唯一的原因就是手残，需要转弯的时候按慢了或者按错键。显然，我一直都没有吃尽食物（原因你懂的），所以入迷了很长一段时间。<br />
说到黑白贪吃蛇，就不得不提诺基亚，就算是屏幕很小的机型，贪吃蛇也做的非常有特色，蛇的细节刻画得很好，玩法也多种多样。具体有多少种模式已经不太记得，但是里面的成就系统还是非常吸引人的。  </p>

<h3 id="d">3D贪吃蛇</h3>
<p>如果你用过塞班系统，一定会听说过诺基亚的那款3D贪吃蛇，保留了诺基亚贪吃蛇制作精良的一贯特色。这款贪吃蛇玩法和经典贪吃蛇截然不同，控制蛇的方向不再是使用上、下、左、右这样的绝对方向去控制，而是只能使用左转、右转、左转两次、右转两次这样的相对方向去控制蛇的前进方向。整个地图也不像经典贪吃蛇那样全部以一张平面图的方式将所有元素铺满整个屏幕，3D贪吃蛇屏幕里面能看到的只有位于蛇前进方向的一个扇形视野区域，或者蛇头附近的一小块区域，在前进过程中可以切换视角看到左方或右方的视野。<br />
这款游戏有30多个关卡，每一个关卡的地图都是不一样的，地图上面有障碍，碰到障碍身体会变短，当不能再变短时就会死亡。地图上的食物不止一个，存在的地点也不是随机的，如果能连续吃到一整段食物则会有的分加倍的效果。<br />
最精彩的地方是整个地图是一个3D空间，在一些关卡里，地图没有边界，类似于现实中的地球，往一个地方一直走会回到原点。有些关卡有边界，但是你冲向边界的那一刻，蛇不会死亡，而是进入了一个全新的地图，另一个次元。<br />
这款游戏我高三的时候才接触的，在紧张学习之余召唤一条贪吃蛇，在另外一个世界驰骋，也算是一种解压的方式。谢谢<a href="about:blank">同学</a>提供设备。  </p>

<h3 id="section-2">码农的贪吃蛇</h3>
<p>去年冬天在公司实习，无聊的时候瞄了一眼JavaScript，发现里面的数组有一个shift()方法，一下子就觉得这个语言好有趣，于是想用这个语言写点什么，顺便用上这个shift()操作。正巧当时在对canvas很感兴趣，于是便萌生了写一个HTML5的贪吃蛇的想法。这算是我开始JavaScript学习的时候吧。我写了好几个版本，在写两条贪吃蛇对战的版本时萌生了写贪吃蛇AI的想法，但是这仅仅停留在想一下的阶段，没有去细想。后来公司的工作越来越多，慢慢的就将贪吃蛇项目搁浅了。<br />
前一阵子微博上有一张非常火的GIF图，里面有一条贪吃蛇最终把整个屏幕吃满了。说实话，作为一名贪吃蛇骨灰级玩家我被彻底震惊了。后来在和<a href="http://dingstyle.me">丁式呆</a>在等待<a href="http://mutong37.com">木橦</a>去骑自行车玩的时候提到了这条风骚的蛇，于是共同决定实现一个贪吃蛇AI。开始的时候觉得这个AI应该很好实现，做一个广度优先搜索就行了，后来我们才发现，贪吃蛇的人蛇生远不止这么简单……  </p>

<h2 id="section-3">贪吃蛇的人生哲学</h2>
<p><a href="http://dingstyle.me">丁式呆</a>的贪吃蛇AI<a href="https://github.com/metaphysiks/snake-ai">在此</a>，可以先感受一下他的<a href="http://dingstyle.me/blog/2013/04/26/snake-ai/">哲学</a>。  </p>

<h3 id="section-4">论吃和活的重要性</h3>
<p>首先贪吃蛇要明白一个道理，只有活下去，才能吃到更多的食物。在吃一个食物的时候就应该仔细研究一下这粒食物是不是“敌人”设下的陷阱，也许贸然吃下这粒食物就会走入一条不归路，最后只能咬蛇自尽。对于这样的食物一定小心，先和食物慢慢周璇，调整一下自己的姿势，在形势利好的时候在以迅雷不及掩耳之势上前取之。  </p>

<h3 id="section-5">做事之前先找好退路</h3>
<p>在贪吃蛇的世界里，只有自己的尾巴会不断腾出新的空间，因此，贪吃蛇的头部尽量和蛇的尾巴保留在一个连通的区间里面。这是一条不可逾越准则，这比吃食物更重要，切记。如果你是一条高瞻远瞩的蛇，能预测到即使与蛇尾暂时失去联系，在不远的将来仍然能够重新会和，那另当别论。  </p>

<h3 id="section-6">穷途末路时放慢脚步，思考人生</h3>
<p>当贪吃蛇发现心爱的食物和自己不在一个次元，没有一条有效的路径到达时，就应该把一贯的横冲直撞的风格改一下，留意一下身边的景色，把身边的每一个空白都当做食物来看待，不要在自己走过的地方附近留下空白。同时不断关注变化的世界，根据食物守恒定律，食物总会到来的。  </p>

<h3 id="section-7">不要贪图眼前的利益</h3>
<p>你有把握在10步以内吃到食物？吃完食物还能保证和蛇尾在一个区间？如果你吃食物之前仔细思考了上面两个问题，那么你已经是一条优秀的蛇了，你肯定能够在贪吃蛇的世界闯出一片天地，能达到普通贪吃蛇所不能达到的境界。但是你有没有思考过你快速吃到了当前的食物，下一个食物你将会付出非常大的代价？这个情况在你自身已经很长的时候尤为明显，往往为了吃一个食物而将整个世界都跑一遍。其实，当你身体已经很长的时候，面对食物不要再像年轻人那样急功近利，老练地迂回一下，往往能保证下一个食物也能很快吃到。这个故事告诉我们贪心算法的解决方法往往不是最优的解决方法，局部次优解往往能获得更好的全局解决方法。  </p>

<h3 id="section-8">少年的时习惯很重要</h3>
<p>作为一条优秀的贪吃蛇，你能吃到很多很多的食物，但慢慢的你会发现，食物越来越难吃到，吃一个食物往往要绕好久好久；食物的位子也越来越刁钻，好像是故意长在你不容易够到的地方一样。其实追根揭底，这都是你年轻时候的错误。人生亦如此，年轻的时候做事吃东西往往顾目的，而不顾过程，做事的时候能够完成任务，但是对一些相关的知识不去仔细深究。年少的时候觉得没什么关系，但是你会发现这些时候时留下的一些空白、知识盲点往往会在你中年的时候暴露出缺点来。升职越来越难，做事开始力不从心，你是否有反思过年轻的过错呢。</p>

<h3 id="section-9">人生路长不要轻言放弃</h3>
<p>我的这个贪吃蛇AI是由<a href="http://dingstyle.me">丁式呆</a>的AI改写的，增加了一些我对贪吃蛇哲学的认识，目前程度只能算是普通，比原来AI更差劲一点。算是优秀的贪吃蛇，但是离非常优秀还很远，至于高瞻远瞩更是遥不可及。但是我会不断改进它，朝那个遥不可及的目标前进。</p>

<div>
	<canvas id="c" width="100px" height="100px" />
	<script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
	<script type="text/javascript">
var FPS = 10;					
var SNAKE_COLOR = {r:90, g:196, b:255};
var FOOD_COLOR = 'black';
var WIDTH = 15;					// 格子横向数目
var HEIGHT = 15;				// 格子纵向数目
var C_WIDTH = 100;				// 画布宽度像素
var C_HEIGHT= 100;				// 画布高度像素
var P_WIDTH = C_HEIGHT / WIDTH;	// 一节身体宽度
var P_HEIGHT= C_HEIGHT / WIDTH;	// 一节身体高度
var WEST = 'w';
var EAST = 'e';
var NORTH = 'n';
var SOUTH = 's';
var LEFT = 'l';
var RIGHT = 'r';
var FRONT = 'f';
var BACK = 'b';

function rgba(r, g, b, a) {
	return "rgba(" + r + ", " + g + ", " + b + ", " + (a != null ? a : 1) + ")";
}

function randInt(min, max) {
	return Math.floor(Math.random()*(max-min) + min);
}

function borderCell(dr, cell) {
	switch(dr) {
		case WEST:
			return new Point(cell.x-1, cell.y);
		case EAST:
			return new Point(cell.x+1, cell.y);
		case NORTH:
			return new Point(cell.x, cell.y-1);
		case SOUTH:
			return new Point(cell.x, cell.y+1);
		default:
			return new Point(cell.x, cell.y);
	}
}

function isCellFree(cell, snake) {
	if(cell.x < 0 || cell.y < 0 || cell.x >= WIDTH || cell.y >= HEIGHT)
		return false;
	for(var i = 0, len = snake.body.length-1; i < len; ++i) {
		if(snake.body[i].equals(cell))
			return false;
	}
	return true;
}

function isOpposite(dr1, dr2) {
	switch(dr1) {
		case WEST:
			if(dr2 == EAST)
				return true;
			break;
		case EAST:
			if(dr2 == WEST)	
				return true;
			break;
		case NORTH:
			if(dr2 == SOUTH)	
				return true;
			break;
		case SOUTH:
			if(dr2 == NORTH)	
				return true;
			break;
		default:
			break;
	}
	return false;
}

function turn(d, t) {
	switch(d) {
		case WEST:
			if(t == RIGHT)
				return NORTH;
			else if(t == LEFT)
				return SOUTH;
			else if(t == BACK)
				return EAST;
			break;
		case EAST:
			if(t == RIGHT)
				return SOUTH;
			else if(t == LEFT)
				return NORTH;
			else if(t == BACK)
				return WEST;
		break;
		case NORTH: 
			if(t == LEFT)
				return WEST;
			else if(t == RIGHT)
				return EAST;
			else if(t == BACK)
				return SOUTH;
		break;
		case SOUTH:
			if(t == LEFT)
				return EAST;
			else if(t == RIGHT)
				return WEST;
			else if(t == BACK)
				return NORTH;
		break;
		default:
		break;
	}
	return d;
}

var Point = (function(){
	function Point(x, y) {
		this.x = x;
		this.y = y;
	}

	Point.prototype.add = function(other) {
		return new Point(this.x+other.x, this.y+other.y);
	}

	Point.prototype.equals = function(other) {
		return this.x == other.x && this.y == other.y;
	}

	Point.prototype.toString = function() {
		return '('+this.x+','+this.y+')';
	}

	return Point;
})();

var Snake = (function(){
	function Snake(head, direction) {
		this.body = [head];
		this.direction = direction!=null ? direction : EAST;
	}

	Snake.prototype.head = function() {
		return this.body[0];
	}

	Snake.prototype.tail = function() {
		return this.body[this.body.length - 1];
	}

	Snake.prototype.fork = function() {
		var snake = new Snake(new Point(0, 0));
		snake.body = this.body.slice(0);
		snake.direction = this.body.direction;
		return snake;
	}

	Snake.prototype.advance = function(cmd) {
		if(cmd == LEFT || cmd == RIGHT || cmd == FRONT || cmd == BACK) {
			this.direction = turn(this.direction, cmd);
		}
		else if(!isOpposite(cmd, this.direction)) {
			this.direction = cmd;
		}
		this.body.unshift(borderCell(this.direction, this.body[0]));
	}

	Snake.prototype.move =function(cmd) {
		this.advance(cmd);
		this.moveTail();
	}

	Snake.prototype.moveTail = function() {
		this.body.pop();
	}

	Snake.prototype.bodyHit = function() {
		// 忽略头部
		var toCheck = this.body.slice(1, this.body.length);
		for(var i = 0, len = toCheck.length; i < len; ++i) {
			if(this.body[0].equals(toCheck[i]))
				return true;
		}
		return false;
	}

	Snake.prototype.wallHit = function() {
		var x = this.body[0].x;
		var y = this.body[0].y;
		return (x < 0 || y < 0 || x > WIDTH || y > HEIGHT);
	}

	Snake.prototype.draw = function(ctx) {
		// draw head
		ctx.fillStyle = rgba(90, 196, 255, 0.8);

	}

	return Snake;
})();

var Game = (function(){
	function Game(ctx) {
		this.ctx = ctx;
		this.fps = FPS;
		this.food = new Point(5, 5);
		this.score = 1;
		this.snake = new Snake(new Point(1, 1));
		this.commands = [];
	}

	Game.prototype.draw = function() {
		this.ctx.clearRect(0, 0, C_WIDTH, C_HEIGHT);
		// draw food
		this.ctx.fillStyle = FOOD_COLOR;
		this.ctx.fillRect(this.food.x*P_WIDTH, this.food.y*P_HEIGHT, P_WIDTH, P_HEIGHT);
		// draw snake
		for(var i = 0, len = this.snake.body.length; i < len; ++i){
			this.ctx.fillStyle = rgba(SNAKE_COLOR.r, SNAKE_COLOR.g, SNAKE_COLOR.b, 1-0.7*(i/len));
			this.ctx.fillRect(
				this.snake.body[i].x * P_WIDTH,
				this.snake.body[i].y * P_HEIGHT,
				P_WIDTH, P_HEIGHT);
		}
	}

	Game.prototype.placeFood = function() {
		if(this.snake.body.length >= WIDTH*HEIGHT - 1)
			return false;
		var nfood;
		while(true) {
			nfood = new Point(randInt(0,WIDTH), randInt(0, HEIGHT));
			if(this.snake.body.every(function(s){
				return !s.equals(nfood);
			})) {
				this.food = nfood;
				return true;
			}
		}
	}

	Game.prototype.onTick = function() {
		this.draw();
		if(this.commands.length == 0) {
			// call AI function
			this.commands = Array.prototype.slice.apply(getCmd(this.snake, this.food));
		}
		this.snake.advance(this.commands.shift());
		if(this.snake.head().equals(this.food)) {
			if(false == this.placeFood()) {
				this.stop();
			}
			this.score += 1;
		} else {
			this.snake.moveTail();
		}
		if(this.snake.wallHit() || this.snake.bodyHit()) {
			this.stop();
		}
	}

	Game.prototype.play = function() {
		var _this = this;
		this.ticker = setInterval(function(){
			return _this.onTick();
		}, 1000/this.fps);
	}

	Game.prototype.stop = function() {
		clearInterval(this.ticker);
	}

	return Game;
})();

// AI code

var pathRecord = (function(){
	function pathRecord(node, direction, parentRecord) {
		this.cell = node;
		this.direction = direction ? direction : '';
		this.parent = parentRecord;
	}

	pathRecord.prototype.traceCmd = function(){
		if(this.parent) {
			return this.parent.traceCmd() + this.direction;
		} else {
			return '' + this.direction;
		}
	};

	return pathRecord;
})();

function findPathToCell(snake, food) {
	var head = snake.head();
	var queue = [new pathRecord(head)];
	var mark = (function(){
		var array = [];
		for(var i = 0; i < HEIGHT; ++i) {
			array[i] = [];
			for(var j = 0; j < WIDTH; ++j) {
				array[i][j] = false;
			}
		}
		return array;
	})();
	var node, cell, dirs, fd;
	while(queue.length > 0) {
		node = queue.shift();
		if(mark[node.cell.y][node.cell.x] == true)	continue;
		if(food.equals(node.cell)) {
			return node.traceCmd();
		}
		mark[node.cell.y][node.cell.x] = true;
		fd = node.direction == '' ? snake.direction : node.direction;
		dirs = [fd, turn(fd, LEFT), turn(fd, RIGHT), turn(fd, BACK)];
		for(var i = 0; i < 4; ++i) {
			cell = borderCell(dirs[i], node.cell);
			if(isCellFree(cell, snake)) {
				queue.push(new pathRecord(cell, dirs[i], node));
			}
		}
	}
	return false;
}

function getLongestDistance(snake, cell1, cell2) {
	var queue = [];
	var mark = (function(){
		var array = [];
		for(var i = 0; i < HEIGHT; ++i) {
			array[i] = [];
			for(var j = 0; j < WIDTH; ++j) {
				array[i][j] = -1;
			}
		}
		for(var i in snake.body) {
			array[snake.body[i].y][snake.body[i].x] = 0;
		}
		array[cell1.y][cell1.x] = array[cell2.y][cell2.x] = -1;
		return array;
	})();
	if(isCellFree(cell1, snake)) {
		queue.push(cell1);
		mark[cell1.y][cell1.x] = 0;
	}
	var node;
	while(queue.length > 0) {
		node = queue.pop();
		if(cell2.equals(node)) {
			var dx = Math.abs(cell2.x - cell1.x);
			var dy = Math.abs(cell2.y - cell1.y);
			return dx > dy ? cell2.y : cell2.x
		}
		var dirs = [NORTH, WEST, SOUTH, EAST];
		for(var i = 0; i < 4; ++i) {
			var cell = borderCell(dirs[i], node);
			if(isCellFree(cell, snake) && mark[cell.y][cell.x] == -1) {
				queue.push(cell);
				mark[cell.y][cell.x] = mark[node.y][node.x] + 1;
				cell = borderCell(dirs[(i+1)%4], cell);
				if(isCellFree(cell, snake) && mark[cell.y][cell.x] == -1) {
					queue.push(cell);
					mark[cell.y][cell.x] = mark[node.y][node.x] + 1;
				}
			}
		}
	}
	return -1;	// can't arrival
}

function followSnakeTail(snake) {
	var head = snake.head();
	var distance = (function(){
		var array = [];
		for(var i = 0; i < HEIGHT; ++i) {
			array[i] = [];
			for(var j = 0; j < WIDTH; ++j) {
				array[i][j] = 0;
			}
		}
		return array;
	})();

	var fork;
	var dir = snake.direction;
	var dirs = [dir, turn(dir, LEFT), turn(dir, RIGHT)];
	var distance = [];
	for(var i = 0; i < 3; ++i) {
		var newhead = borderCell(dirs[i], head);
		if(isCellFree(newhead, snake))
			distance[i] = getLongestDistance(snake, snake.tail(), newhead);
		else 
			distance[i] = -1;
	}
	var max =	distance[0] > distance[1] ?
				(distance[0] > distance[2] ? 0 : 2) :
				(distance[1] > distance[2] ? 1 : 2);
	return dirs[max];
}

function getCmd(snake, food) {
	var path = findPathToCell(snake, food);
	if(false == path || path.length >= (WIDTH*HEIGHT-snake.length)*0.3) {
		return followSnakeTail(snake);
	}
	var fork = snake.fork();
	for(var i = 0, len = path.length; i < len-1; ++i) {
		fork.advance(path[i]);
		fork.moveTail();
	}
	fork.advance(path[i]);
	if(false == findPathToCell(fork, fork.tail())) {
		return followSnakeTail(snake);
	}
	return path;
}

// AI END

var context = $('#c')[0].getContext('2d');
var game = new Game(context);
game.play();

	</script>
</div>
]]></content>
  </entry>
  
</feed>
